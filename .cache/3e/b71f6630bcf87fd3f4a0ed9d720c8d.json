{"id":"node_modules/rxjs/_esm5/internal/operators/publishLast.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\publishLast.js.map","includedInParent":true,"mtime":1620036760054},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\publishLast.ts","includedInParent":true,"mtime":1620036760704},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"../AsyncSubject","loc":{"line":2,"column":29},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\publishLast.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\AsyncSubject.js"},{"name":"./multicast","loc":{"line":3,"column":26},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\publishLast.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\multicast.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.publishLast = publishLast;\n\nvar _AsyncSubject = require(\"../AsyncSubject\");\n\nvar _multicast = require(\"./multicast\");\n\n/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */\nfunction publishLast() {\n  return function (source) {\n    return (0, _multicast.multicast)(new _AsyncSubject.AsyncSubject())(source);\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":66,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":66,"column":2},"generated":{"line":13,"column":20}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":66,"column":31},"generated":{"line":13,"column":23}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":14,"column":9}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":14,"column":19}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":14,"column":25}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":14,"column":27}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":0}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":11}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":37}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":41}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":67}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":69}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":71}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":77}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":15,"column":78}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":0}},{"source":"../../../src/internal/operators/publishLast.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":3}}],"sources":{"../../../src/internal/operators/publishLast.ts":"import { Observable } from '../Observable';\r\nimport { AsyncSubject } from '../AsyncSubject';\r\nimport { multicast } from './multicast';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { UnaryFunction } from '../types';\r\n\r\n/**\r\n * Returns a connectable observable sequence that shares a single subscription to the\r\n * underlying sequence containing only the last notification.\r\n *\r\n * ![](publishLast.png)\r\n *\r\n * Similar to {@link publish}, but it waits until the source observable completes and stores\r\n * the last emitted value.\r\n * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\r\n * value even if it has no more subscribers. If subsequent subscriptions happen, they will\r\n * immediately get that last stored value and complete.\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { interval } from 'rxjs';\r\n * import { publishLast, tap, take } from 'rxjs/operators';\r\n *\r\n * const connectable =\r\n *   interval(1000)\r\n *     .pipe(\r\n *       tap(x => console.log(\"side effect\", x)),\r\n *       take(3),\r\n *       publishLast());\r\n *\r\n * connectable.subscribe(\r\n *   x => console.log(  \"Sub. A\", x),\r\n *   err => console.log(\"Sub. A Error\", err),\r\n *   () => console.log( \"Sub. A Complete\"));\r\n *\r\n * connectable.subscribe(\r\n *   x => console.log(  \"Sub. B\", x),\r\n *   err => console.log(\"Sub. B Error\", err),\r\n *   () => console.log( \"Sub. B Complete\"));\r\n *\r\n * connectable.connect();\r\n *\r\n * // Results:\r\n * //    \"side effect 0\"\r\n * //    \"side effect 1\"\r\n * //    \"side effect 2\"\r\n * //    \"Sub. A 2\"\r\n * //    \"Sub. B 2\"\r\n * //    \"Sub. A Complete\"\r\n * //    \"Sub. B Complete\"\r\n * ```\r\n *\r\n * @see {@link ConnectableObservable}\r\n * @see {@link publish}\r\n * @see {@link publishReplay}\r\n * @see {@link publishBehavior}\r\n *\r\n * @return {ConnectableObservable} An observable sequence that contains the elements of a\r\n * sequence produced by multicasting the source sequence.\r\n * @method publishLast\r\n * @owner Observable\r\n */\r\n\r\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\r\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"0ef15000f3180e5b9b613b5efa2a6d35","cacheData":{"env":{}}}