{"id":"node_modules/rxjs/_esm5/internal/operators/auditTime.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\auditTime.js.map","includedInParent":true,"mtime":1620036760023},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\auditTime.ts","includedInParent":true,"mtime":1620036760690},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"../scheduler/async","loc":{"line":2,"column":22},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\auditTime.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\async.js"},{"name":"./audit","loc":{"line":3,"column":22},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\auditTime.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\audit.js"},{"name":"../observable/timer","loc":{"line":4,"column":22},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\auditTime.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\observable\\timer.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.auditTime = auditTime;\n\nvar _async = require(\"../scheduler/async\");\n\nvar _audit = require(\"./audit\");\n\nvar _timer = require(\"../observable/timer\");\n\n/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */\nfunction auditTime(duration, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = _async.async;\n  }\n\n  return (0, _audit.audit)(function () {\n    return (0, _timer.timer)(duration, scheduler);\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":9}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":18}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":19}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":27}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":29}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":38}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":15,"column":40}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":6}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":15}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":20}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":25}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":16,"column":26}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":56,"column":15},"generated":{"line":16,"column":28}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":0}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":4}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":13}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":16}},{"source":"../../../src/internal/operators/auditTime.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":17,"column":28}}],"sources":{"../../../src/internal/operators/auditTime.ts":"import { async } from '../scheduler/async';\r\nimport { audit } from './audit';\r\nimport { timer } from '../observable/timer';\r\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\r\n\r\n/**\r\n * Ignores source values for `duration` milliseconds, then emits the most recent\r\n * value from the source Observable, then repeats this process.\r\n *\r\n * <span class=\"informal\">When it sees a source value, it ignores that plus\r\n * the next ones for `duration` milliseconds, and then it emits the most recent\r\n * value from the source.</span>\r\n *\r\n * ![](auditTime.png)\r\n *\r\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\r\n * silenced time window, instead of the first value. `auditTime` emits the most\r\n * recent value from the source Observable on the output Observable as soon as\r\n * its internal timer becomes disabled, and ignores source values while the\r\n * timer is enabled. Initially, the timer is disabled. As soon as the first\r\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\r\n * the time unit determined internally by the optional `scheduler`) has passed,\r\n * the timer is disabled, then the most recent source value is emitted on the\r\n * output Observable, and this process repeats for the next source value.\r\n * Optionally takes a {@link SchedulerLike} for managing timers.\r\n *\r\n * ## Example\r\n *\r\n * Emit clicks at a rate of at most one click per second\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { auditTime } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(auditTime(1000));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttleTime}\r\n *\r\n * @param {number} duration Time to wait before emitting the most recent source\r\n * value, measured in milliseconds or the time unit determined internally\r\n * by the optional `scheduler`.\r\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\n * managing the timers that handle the rate-limiting behavior.\r\n * @return {Observable<T>} An Observable that performs rate-limiting of\r\n * emissions from the source Observable.\r\n * @method auditTime\r\n * @owner Observable\r\n */\r\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\r\n  return audit(() => timer(duration, scheduler));\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"e548e6a584fc5ad817fef542d0f20aa9","cacheData":{"env":{}}}