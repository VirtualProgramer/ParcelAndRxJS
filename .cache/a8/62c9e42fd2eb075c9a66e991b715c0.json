{"id":"node_modules/rxjs/_esm5/internal/operators/mergeAll.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeAll.js.map","includedInParent":true,"mtime":1620036760047},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\mergeAll.ts","includedInParent":true,"mtime":1620036760701},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeAll.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeMap.js"},{"name":"../util/identity","loc":{"line":3,"column":25},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeAll.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\util\\identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeAll = mergeAll;\n\nvar _mergeMap = require(\"./mergeMap\");\n\nvar _identity = require(\"../util/identity\");\n\n/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\nfunction mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return (0, _mergeMap.mergeMap)(_identity.identity, concurrent);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":13,"column":9}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":13,"column":17}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":13,"column":18}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":13,"column":28}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":13,"column":30}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":14,"column":6}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":14,"column":16}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":18},"generated":{"line":14,"column":21}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":26},"generated":{"line":14,"column":26}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":14,"column":27}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":28},"generated":{"line":14,"column":29}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":15,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":15,"column":4}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":15,"column":14}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":15,"column":17}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":15,"column":23}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":15,"column":24}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":15,"column":41}}],"sources":{"../../../src/internal/operators/mergeAll.ts":"\r\nimport { mergeMap } from './mergeMap';\r\nimport { identity } from '../util/identity';\r\nimport { OperatorFunction, ObservableInput } from '../types';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable which\r\n * concurrently delivers all values that are emitted on the inner Observables.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * ![](mergeAll.png)\r\n *\r\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\r\n * a higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, it subscribes to that and delivers all the values from the\r\n * inner Observable on the output Observable. The output Observable only\r\n * completes once all inner Observables have completed. Any error delivered by\r\n * a inner Observable will be immediately emitted on the output Observable.\r\n *\r\n * ## Examples\r\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { map, mergeAll } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\r\n * const firstOrder = higherOrder.pipe(mergeAll());\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { take, map, mergeAll } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map((ev) => interval(1000).pipe(take(10))),\r\n * );\r\n * const firstOrder = higherOrder.pipe(mergeAll(2));\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaust}\r\n * @see {@link merge}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link zipAll}\r\n *\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits values coming from all the\r\n * inner Observables emitted by the source Observable.\r\n * @method mergeAll\r\n * @owner Observable\r\n */\r\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<ObservableInput<T>, T> {\r\n  return mergeMap(identity, concurrent);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"3c3837c85d4592b45d62d26b16ef4915","cacheData":{"env":{}}}