{"id":"node_modules/rxjs/_esm5/internal/operators/concatMap.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\concatMap.js.map","includedInParent":true,"mtime":1620036760030},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\concatMap.ts","includedInParent":true,"mtime":1620036760693},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\concatMap.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeMap.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatMap = concatMap;\n\nvar _mergeMap = require(\"./mergeMap\");\n\n/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */\nfunction concatMap(project, resultSelector) {\n  return (0, _mergeMap.mergeMap)(project, resultSelector, 1);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":18}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":18},"generated":{"line":11,"column":19}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":26}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":27},"generated":{"line":11,"column":28}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":11,"column":42}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":76,"column":46},"generated":{"line":11,"column":44}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":9}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":33}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":40}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":42}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":56}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":58}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":59}},{"source":"../../../src/internal/operators/concatMap.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":12,"column":60}}],"sources":{"../../../src/internal/operators/concatMap.ts":"import { mergeMap } from './mergeMap';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) =>  O): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated resultSelector no longer supported, use inner map instead */\r\nexport function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated resultSelector no longer supported, use inner map instead */\r\nexport function concatMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) =>  O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, in a serialized fashion waiting for each one to complete before\r\n * merging the next.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link concatAll}.</span>\r\n *\r\n * ![](concatMap.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\r\n * concatenated with the previous inner Observable.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * ## Example\r\n * For each click event, tick every second from 0 to 3, with no concurrency\r\n *\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { concatMap, take } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   concatMap(ev => interval(1000).pipe(take(4)))\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n * ```\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional deprecated `resultSelector`) to each item emitted\r\n * by the source Observable and taking values from each projected inner\r\n * Observable sequentially.\r\n * @method concatMap\r\n * @owner Observable\r\n */\r\nexport function concatMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, ObservedValueOf<O>|R> {\r\n  return mergeMap(project, resultSelector, 1);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"262da4cda7e40b94088f1bfb5ba5702c","cacheData":{"env":{}}}