{"id":"node_modules/rxjs/_esm5/internal/scheduler/async.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\async.js.map","includedInParent":true,"mtime":1620036760087},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\scheduler\\async.ts","includedInParent":true,"mtime":1620036760720},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"./AsyncAction","loc":{"line":2,"column":28},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\async.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsyncAction.js"},{"name":"./AsyncScheduler","loc":{"line":3,"column":31},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\async.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\scheduler\\AsyncScheduler.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.async = exports.asyncScheduler = void 0;\n\nvar _AsyncAction = require(\"./AsyncAction\");\n\nvar _AsyncScheduler = require(\"./AsyncScheduler\");\n\n/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nvar asyncScheduler = /*@__PURE__*/new _AsyncScheduler.AsyncScheduler(_AsyncAction.AsyncAction);\nexports.asyncScheduler = asyncScheduler;\nvar async = asyncScheduler;\nexports.async = async;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":7},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":13},"generated":{"line":13,"column":4}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":21},"generated":{"line":13,"column":18}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":21},"generated":{"line":13,"column":21}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":36},"generated":{"line":13,"column":34}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":36},"generated":{"line":13,"column":38}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":36},"generated":{"line":13,"column":68}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":36},"generated":{"line":13,"column":69}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":36},"generated":{"line":13,"column":93}},{"source":"../../../src/internal/scheduler/async.ts","name":null,"original":{"line":55,"column":7},"generated":{"line":13,"column":94}}],"sources":{"../../../src/internal/scheduler/async.ts":"import { AsyncAction } from './AsyncAction';\r\nimport { AsyncScheduler } from './AsyncScheduler';\r\n\r\n/**\r\n *\r\n * Async Scheduler\r\n *\r\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\r\n *\r\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\r\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\r\n * in intervals.\r\n *\r\n * If you just want to \"defer\" task, that is to perform it right after currently\r\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\r\n * better choice will be the {@link asapScheduler} scheduler.\r\n *\r\n * ## Examples\r\n * Use async scheduler to delay task\r\n * ```ts\r\n * import { asyncScheduler } from 'rxjs';\r\n *\r\n * const task = () => console.log('it works!');\r\n *\r\n * asyncScheduler.schedule(task, 2000);\r\n *\r\n * // After 2 seconds logs:\r\n * // \"it works!\"\r\n * ```\r\n *\r\n * Use async scheduler to repeat task in intervals\r\n * ```ts\r\n * import { asyncScheduler } from 'rxjs';\r\n *\r\n * function task(state) {\r\n *   console.log(state);\r\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\r\n *                                   // which we reschedule with new state and delay\r\n * }\r\n *\r\n * asyncScheduler.schedule(task, 3000, 0);\r\n *\r\n * // Logs:\r\n * // 0 after 3s\r\n * // 1 after 4s\r\n * // 2 after 5s\r\n * // 3 after 6s\r\n * ```\r\n */\r\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\r\n\r\n/**\r\n * @deprecated renamed. Use {@link asyncScheduler}\r\n */\r\nexport const async = asyncScheduler;"},"lineCount":null}},"error":null,"hash":"33da72b4928357f29026e551227f7212","cacheData":{"env":{}}}