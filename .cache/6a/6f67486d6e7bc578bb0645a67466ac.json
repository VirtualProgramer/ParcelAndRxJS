{"id":"node_modules/rxjs/_esm5/internal/operators/publish.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\publish.js.map","includedInParent":true,"mtime":1620036760053},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\publish.ts","includedInParent":true,"mtime":1620036760704},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"../Subject","loc":{"line":2,"column":24},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\publish.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\Subject.js"},{"name":"./multicast","loc":{"line":3,"column":26},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\publish.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\multicast.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.publish = publish;\n\nvar _Subject = require(\"../Subject\");\n\nvar _multicast = require(\"./multicast\");\n\n/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */\nfunction publish(selector) {\n  return selector ? (0, _multicast.multicast)(function () {\n    return new _Subject.Subject();\n  }, selector) : (0, _multicast.multicast)(new _Subject.Subject());\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":64,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":13,"column":16}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":13,"column":17}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":13,"column":25}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":13,"column":27}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":65,"column":4},"generated":{"line":14,"column":9}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":65,"column":14},"generated":{"line":14,"column":17}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":4},"generated":{"line":14,"column":20}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":14},"generated":{"line":14,"column":46}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":25},"generated":{"line":14,"column":58}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":31},"generated":{"line":15,"column":0}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":32},"generated":{"line":15,"column":11}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":32},"generated":{"line":15,"column":15}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":32},"generated":{"line":15,"column":31}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":31},"generated":{"line":15,"column":33}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":32},"generated":{"line":16,"column":0}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":4},"generated":{"line":16,"column":3}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":32},"generated":{"line":16,"column":5}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":66,"column":4},"generated":{"line":16,"column":13}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":65,"column":14},"generated":{"line":16,"column":14}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":17}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":43}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":47}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":63}},{"source":"../../../src/internal/operators/publish.ts","name":null,"original":{"line":67,"column":1},"generated":{"line":16,"column":65}}],"sources":{"../../../src/internal/operators/publish.ts":"import { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { multicast } from './multicast';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\nexport function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\r\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\n * before it begins emitting items to those Observers that have subscribed to it.\r\n *\r\n * <span class=\"informal\">Makes a cold Observable hot</span>\r\n *\r\n * ![](publish.png)\r\n *\r\n * ## Examples\r\n * Make source$ hot by applying publish operator, then merge each inner observable into a single one\r\n * and subscribe.\r\n * ```ts\r\n * import { of, zip, interval, merge } from \"rxjs\";\r\n * import { map, publish, tap } from \"rxjs/operators\";\r\n *\r\n * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9)).pipe(\r\n *   map(values => values[1])\r\n * );\r\n *\r\n * source$\r\n *   .pipe(\r\n *     publish(multicasted$ =>\r\n *       merge(\r\n *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 3:', x))),\r\n *       )\r\n *     )\r\n *   )\r\n *   .subscribe();\r\n *\r\n * // Results every two seconds\r\n * // Stream 1: 1\r\n * // Stream 2: 1\r\n * // Stream 3: 1\r\n * // ...\r\n * // Stream 1: 9\r\n * // Stream 2: 9\r\n * // Stream 3: 9\r\n * ```\r\n *\r\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\n * as needed, without causing multiple subscriptions to the source sequence.\r\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\r\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method publish\r\n * @owner Observable\r\n *\r\n *\r\n */\r\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\r\n  return selector ?\r\n    multicast(() => new Subject<T>(), selector) :\r\n    multicast(new Subject<T>());\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"c349fcfe975d10fba2d6cc9edd94d479","cacheData":{"env":{}}}