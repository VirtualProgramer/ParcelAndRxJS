{"id":"node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeMapTo.js.map","includedInParent":true,"mtime":1620036760048},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\mergeMapTo.ts","includedInParent":true,"mtime":1620036760702},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeMapTo.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeMap.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeMapTo = mergeMapTo;\n\nvar _mergeMap = require(\"./mergeMap\");\n\n/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'function') {\n    return (0, _mergeMap.mergeMap)(function () {\n      return innerObservable;\n    }, resultSelector, concurrent);\n  }\n\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return (0, _mergeMap.mergeMap)(function () {\n    return innerObservable;\n  }, concurrent);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":9}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":19}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":20}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":35}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":37}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":51}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":30},"generated":{"line":11,"column":53}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":11,"column":63}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":47},"generated":{"line":11,"column":65}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":2},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":6},"generated":{"line":12,"column":6}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":12,"column":16}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":12,"column":21}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":12,"column":26}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":2},"generated":{"line":12,"column":27}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":27},"generated":{"line":12,"column":29}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":4},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":4},"generated":{"line":13,"column":4}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":11},"generated":{"line":13,"column":14}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":11},"generated":{"line":13,"column":17}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":20},"generated":{"line":13,"column":23}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":20},"generated":{"line":13,"column":24}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":4},"generated":{"line":13,"column":41}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":59,"column":3},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":16,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":16,"column":6}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":16,"column":13}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":16,"column":27}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":32},"generated":{"line":16,"column":32}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":16,"column":42}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":42},"generated":{"line":16,"column":44}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":17,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":17,"column":11}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":17,"column":35}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":17,"column":47}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":18,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":18,"column":13}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":18,"column":28}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":19,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":19,"column":5}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":19,"column":7}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":19,"column":21}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":19,"column":23}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":19,"column":33}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":19,"column":34}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":62,"column":3},"generated":{"line":20,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":22,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":22,"column":6}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":22,"column":13}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":22,"column":27}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":24},"generated":{"line":22,"column":32}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":22,"column":40}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":24},"generated":{"line":22,"column":42}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":23,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":23,"column":4}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":23,"column":14}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":23,"column":17}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":23,"column":31}}],"sources":{"../../../src/internal/operators/mergeMapTo.ts":"import { Observable } from '../Observable';\r\nimport { OperatorFunction, ObservedValueOf } from '../../internal/types';\r\nimport { mergeMap } from './mergeMap';\r\nimport { ObservableInput } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function mergeMapTo<T, O extends ObservableInput<any>>(innerObservable: O, concurrent?: number): OperatorFunction<any, ObservedValueOf<O>>;\r\n/** @deprecated */\r\nexport function mergeMapTo<T, R, O extends ObservableInput<any>>(innerObservable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to the same Observable which is merged multiple\r\n * times in the output Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\r\n * to the same inner Observable.</span>\r\n *\r\n * ![](mergeMapTo.png)\r\n *\r\n * Maps each source value to the given Observable `innerObservable` regardless\r\n * of the source value, and then merges those resulting Observables into one\r\n * single Observable, which is the output Observable.\r\n *\r\n * ## Example\r\n * For each click event, start an interval Observable ticking every 1 second\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { mergeMapTo } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(mergeMapTo(interval(1000)));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link concatMapTo}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {ObservableInput} innerObservable An Observable to replace each value from\r\n * the source Observable.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits items from the given\r\n * `innerObservable`\r\n * @method mergeMapTo\r\n * @owner Observable\r\n */\r\nexport function mergeMapTo<T, R, O extends ObservableInput<any>>(\r\n  innerObservable: O,\r\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\r\n  concurrent: number = Number.POSITIVE_INFINITY\r\n): OperatorFunction<T, ObservedValueOf<O>|R> {\r\n  if (typeof resultSelector === 'function') {\r\n    return mergeMap(() => innerObservable, resultSelector, concurrent);\r\n  }\r\n  if (typeof resultSelector === 'number') {\r\n    concurrent = resultSelector;\r\n  }\r\n  return mergeMap(() => innerObservable, concurrent);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"4be166416b39d3d2d65bce61d2307b2d","cacheData":{"env":{}}}