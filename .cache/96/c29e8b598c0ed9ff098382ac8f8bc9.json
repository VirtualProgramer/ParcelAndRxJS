{"id":"node_modules/rxjs/_esm5/internal/observable/empty.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\observable\\empty.js.map","includedInParent":true,"mtime":1620036760010},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\observable\\empty.ts","includedInParent":true,"mtime":1620036760685},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"../Observable","loc":{"line":2,"column":27},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\observable\\empty.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\Observable.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.empty = empty;\nexports.EMPTY = void 0;\n\nvar _Observable = require(\"../Observable\");\n\n/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nvar EMPTY = /*@__PURE__*/new _Observable.Observable(function (subscriber) {\n  return subscriber.complete();\n});\nexports.EMPTY = EMPTY;\n\nfunction empty(scheduler) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler) {\n  return new _Observable.Observable(function (subscriber) {\n    return scheduler.schedule(function () {\n      return subscriber.complete();\n    });\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":6},"generated":{"line":12,"column":4}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":16},"generated":{"line":12,"column":12}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":12,"column":25}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":12,"column":29}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":12,"column":51}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":12,"column":52}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":12,"column":62}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":12,"column":72}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":12,"column":74}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":13,"column":9}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":13,"column":19}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":13,"column":20}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":13,"column":28}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":13,"column":30}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":47},"generated":{"line":14,"column":1}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":62,"column":6},"generated":{"line":14,"column":2}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":17,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":17,"column":9}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":17,"column":14}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":63,"column":20},"generated":{"line":17,"column":15}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":17,"column":24}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":17,"column":26}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":9}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":18}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":21}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":35}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":36}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":45}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":46}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":49}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":18,"column":54}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":21,"column":9}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":67,"column":13},"generated":{"line":21,"column":24}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":67,"column":31},"generated":{"line":21,"column":35}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":9}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":13}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":35}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":36}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":46}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":56}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":22,"column":58}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":23,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":23,"column":11}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":23,"column":20}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":23,"column":21}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":23,"column":29}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":23,"column":30}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":23,"column":42}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":24,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":24,"column":13}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":24,"column":23}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":24,"column":24}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":24,"column":32}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":24,"column":34}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":25,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":25,"column":5}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":25,"column":6}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":26,"column":0}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":26,"column":3}},{"source":"../../../src/internal/observable/empty.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":26,"column":4}}],"sources":{"../../../src/internal/observable/empty.ts":"import { Observable } from '../Observable';\r\nimport { SchedulerLike } from '../types';\r\n\r\n/**\r\n * The same Observable instance returned by any call to {@link empty} without a\r\n * `scheduler`. It is preferrable to use this over `empty()`.\r\n */\r\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\r\n\r\n/**\r\n * Creates an Observable that emits no items to the Observer and immediately\r\n * emits a complete notification.\r\n *\r\n * <span class=\"informal\">Just emits 'complete', and nothing else.\r\n * </span>\r\n *\r\n * ![](empty.png)\r\n *\r\n * This static operator is useful for creating a simple Observable that only\r\n * emits the complete notification. It can be used for composing with other\r\n * Observables, such as in a {@link mergeMap}.\r\n *\r\n * ## Examples\r\n * ### Emit the number 7, then complete\r\n * ```ts\r\n * import { empty } from 'rxjs';\r\n * import { startWith } from 'rxjs/operators';\r\n *\r\n * const result = empty().pipe(startWith(7));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\r\n * ```ts\r\n * import { empty, interval, of } from 'rxjs';\r\n * import { mergeMap } from 'rxjs/operators';\r\n *\r\n * const interval$ = interval(1000);\r\n * const result = interval$.pipe(\r\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following to the console:\r\n * // x is equal to the count on the interval eg(0,1,2,3,...)\r\n * // x will occur every 1000ms\r\n * // if x % 2 is equal to 1 print abc\r\n * // if x % 2 is not equal to 1 nothing will be output\r\n * ```\r\n *\r\n * @see {@link Observable}\r\n * @see {@link never}\r\n * @see {@link of}\r\n * @see {@link throwError}\r\n *\r\n * @param scheduler A {@link SchedulerLike} to use for scheduling\r\n * the emission of the complete notification.\r\n * @return An \"empty\" Observable: emits only the complete\r\n * notification.\r\n * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\r\n */\r\nexport function empty(scheduler?: SchedulerLike) {\r\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\r\n}\r\n\r\nfunction emptyScheduled(scheduler: SchedulerLike) {\r\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"2a9779bf513d12e485fd36b2a3be3af5","cacheData":{"env":{}}}