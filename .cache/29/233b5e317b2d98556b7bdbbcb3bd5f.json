{"id":"node_modules/rxjs/_esm5/internal/operators/switchAll.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\switchAll.js.map","includedInParent":true,"mtime":1620036760065},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\switchAll.ts","includedInParent":true,"mtime":1620036760709},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"./switchMap","loc":{"line":2,"column":26},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\switchAll.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\switchMap.js"},{"name":"../util/identity","loc":{"line":3,"column":25},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\switchAll.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\util\\identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switchAll = switchAll;\n\nvar _switchMap = require(\"./switchMap\");\n\nvar _identity = require(\"../util/identity\");\n\n/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */\nfunction switchAll() {\n  return (0, _switchMap.switchMap)(_identity.identity);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":13,"column":18}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":64,"column":19},"generated":{"line":13,"column":21}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":9}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":35}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":53}},{"source":"../../../src/internal/operators/switchAll.ts","name":null,"original":{"line":65,"column":1},"generated":{"line":14,"column":54}}],"sources":{"../../../src/internal/operators/switchAll.ts":"import {OperatorFunction, ObservableInput} from '../types';\r\nimport { switchMap } from './switchMap';\r\nimport { identity } from '../util/identity';\r\n\r\nexport function switchAll<T>(): OperatorFunction<ObservableInput<T>, T>;\r\nexport function switchAll<R>(): OperatorFunction<any, R>;\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable\r\n * producing values only from the most recent observable sequence\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * ![](switchAll.png)\r\n *\r\n * `switchAll` subscribes to a source that is an observable of observables, also known as a\r\n * \"higher-order observable\" (or `Observable<Observable<T>>`). It subscribes to the most recently\r\n * provided \"inner observable\" emitted by the source, unsubscribing from any previously subscribed\r\n * to inner observable, such that only the most recent inner observable may be subscribed to at\r\n * any point in time. The resulting observable returned by `switchAll` will only complete if the\r\n * source observable completes, *and* any currently subscribed to inner observable also has completed,\r\n * if there are any.\r\n *\r\n * ## Examples\r\n * Spawn a new interval observable for each click event, but for every new\r\n * click, cancel the previous interval and subscribe to the new one.\r\n *\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { switchAll, map, tap } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click').pipe(tap(() => console.log('click')));\r\n * const source = clicks.pipe(map((ev) => interval(1000)));\r\n *\r\n * source.pipe(\r\n *   switchAll()\r\n * ).subscribe(x => console.log(x));\r\n *\r\n * // Output\r\n * // click\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // 4\r\n * // ...\r\n * // click\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // ...\r\n * // click\r\n * // ...\r\n * ```\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaust}\r\n * @see {@link switchMap}\r\n * @see {@link switchMapTo}\r\n * @see {@link mergeAll}\r\n */\r\n\r\nexport function switchAll<T>(): OperatorFunction<ObservableInput<T>, T> {\r\n  return switchMap(identity);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"c80817d999b9276fb09786fb3ea6be40","cacheData":{"env":{}}}