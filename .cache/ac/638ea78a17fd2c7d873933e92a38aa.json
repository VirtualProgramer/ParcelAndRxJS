{"id":"node_modules/rxjs/_esm5/internal/operators/min.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\min.js.map","includedInParent":true,"mtime":1620036760049},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\min.ts","includedInParent":true,"mtime":1620036760702},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"./reduce","loc":{"line":2,"column":23},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\min.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\reduce.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.min = min;\n\nvar _reduce = require(\"./reduce\");\n\n/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */\nfunction min(comparer) {\n  var min = typeof comparer === 'function' ? function (x, y) {\n    return comparer(x, y) < 0 ? x : y;\n  } : function (x, y) {\n    return x < y ? x : y;\n  };\n  return (0, _reduce.reduce)(min);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":48,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":49,"column":34},"generated":{"line":11,"column":9}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":11,"column":12}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":49,"column":34},"generated":{"line":11,"column":13}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":11,"column":21}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":49,"column":49},"generated":{"line":11,"column":23}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":12,"column":6}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":6},"generated":{"line":12,"column":9}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":6},"generated":{"line":12,"column":12}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":8},"generated":{"line":12,"column":19}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":6},"generated":{"line":12,"column":27}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":16},"generated":{"line":12,"column":32}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":6},"generated":{"line":12,"column":42}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":12,"column":45}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":7},"generated":{"line":12,"column":55}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":12,"column":56}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":10},"generated":{"line":12,"column":58}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":6},"generated":{"line":12,"column":59}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":11},"generated":{"line":12,"column":61}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":13,"column":11}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":24},"generated":{"line":13,"column":19}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":25},"generated":{"line":13,"column":20}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":24},"generated":{"line":13,"column":21}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":28},"generated":{"line":13,"column":23}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":24},"generated":{"line":13,"column":24}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":13,"column":25}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":30},"generated":{"line":13,"column":28}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":13,"column":29}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":30},"generated":{"line":13,"column":32}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":13,"column":33}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":30},"generated":{"line":13,"column":36}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":13,"column":37}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":51,"column":30},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":50,"column":6},"generated":{"line":14,"column":3}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":14,"column":6}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":16},"generated":{"line":14,"column":16}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":14,"column":17}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":14,"column":19}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":2},"generated":{"line":14,"column":20}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":14,"column":22}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":11}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":12}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":15}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":16}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":19}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":20}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":23}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":15,"column":24}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":52,"column":21},"generated":{"line":16,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":53,"column":1},"generated":{"line":17,"column":0}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":53,"column":1},"generated":{"line":17,"column":9}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":53,"column":1},"generated":{"line":17,"column":29}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":53,"column":1},"generated":{"line":17,"column":32}},{"source":"../../../src/internal/operators/min.ts","name":null,"original":{"line":53,"column":1},"generated":{"line":17,"column":33}}],"sources":{"../../../src/internal/operators/min.ts":"import { reduce } from './reduce';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\n\r\n/**\r\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the smallest value.\r\n *\r\n * ![](min.png)\r\n *\r\n * ## Examples\r\n * Get the minimal value of a series of numbers\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { min } from 'rxjs/operators';\r\n *\r\n * of(5, 4, 7, 2, 8).pipe(\r\n *   min(),\r\n * )\r\n * .subscribe(x => console.log(x)); // -> 2\r\n * ```\r\n *\r\n * Use a comparer function to get the minimal item\r\n * ```typescript\r\n * import { of } from 'rxjs';\r\n * import { min } from 'rxjs/operators';\r\n *\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * of<Person>(\r\n *   {age: 7, name: 'Foo'},\r\n *   {age: 5, name: 'Bar'},\r\n *   {age: 9, name: 'Beer'},\r\n * ).pipe(\r\n *   min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1),\r\n * )\r\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\r\n * ```\r\n * @see {@link max}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable<R>} An Observable that emits item with the smallest value.\r\n * @method min\r\n * @owner Observable\r\n */\r\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\r\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\r\n    ? (x, y) => comparer(x, y) < 0 ? x : y\r\n    : (x, y) => x < y ? x : y;\r\n  return reduce(min);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"114e3c8dc3477b7ae6eef94655c8432a","cacheData":{"env":{}}}