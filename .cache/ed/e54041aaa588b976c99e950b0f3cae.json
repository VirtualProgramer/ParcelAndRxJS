{"id":"node_modules/rxjs/_esm5/internal/operators/combineAll.js","dependencies":[{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\combineAll.js.map","includedInParent":true,"mtime":1620036760027},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\src\\internal\\operators\\combineAll.ts","includedInParent":true,"mtime":1620036760692},{"name":"D:\\GitHub\\ParcelAndRxJS\\package.json","includedInParent":true,"mtime":1623719303235},{"name":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1620036760590},{"name":"../observable/combineLatest","loc":{"line":2,"column":38},"parent":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\operators\\combineAll.js","resolved":"D:\\GitHub\\ParcelAndRxJS\\node_modules\\rxjs\\_esm5\\internal\\observable\\combineLatest.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.combineAll = combineAll;\n\nvar _combineLatest = require(\"../observable/combineLatest\");\n\n/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */\nfunction combineAll(project) {\n  return function (source) {\n    return source.lift(new _combineLatest.CombineLatestOperator(project));\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":11,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":11,"column":19}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":31},"generated":{"line":11,"column":20}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":11,"column":27}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":36},"generated":{"line":11,"column":29}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":9}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":19}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":25}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":12,"column":27}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":11}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":17}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":18}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":22}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":23}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":27}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":63}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":64}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":71}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":72}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":13,"column":73}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":14,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":14,"column":3}}],"sources":{"../../../src/internal/operators/combineAll.ts":"import { CombineLatestOperator } from '../observable/combineLatest';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction, ObservableInput } from '../types';\r\n\r\nexport function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\r\nexport function combineAll<T>(): OperatorFunction<any, T[]>;\r\nexport function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\r\nexport function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\r\n/**\r\n * Flattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\r\n *\r\n * ![](combineAll.png)\r\n *\r\n * `combineAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\r\n * it subscribes to all collected Observables and combines their values using the {@link combineLatest}</a> strategy, such that:\r\n *\r\n * * Every time an inner Observable emits, the output Observable emits\r\n * * When the returned observable emits, it emits all of the latest values by:\r\n *    * If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\r\n *      arrived, and the result of the `project` function is what is emitted by the output Observable.\r\n *    * If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\r\n *\r\n * ---\r\n *\r\n * ## Examples\r\n *\r\n * ### Map two click events to a finite interval Observable, then apply `combineAll`\r\n *\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { map, combineAll, take } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(ev =>\r\n *      interval(Math.random() * 2000).pipe(take(3))\r\n *   ),\r\n *   take(2)\r\n * );\r\n * const result = higherOrder.pipe(\r\n *   combineAll()\r\n * );\r\n *\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineLatest}\r\n * @see {@link mergeAll}\r\n *\r\n * @param {function(...values: Array<any>)} An optional function to map the most recent values from each inner Observable into a new result.\r\n * Takes each of the most recent values from each collected inner Observable as arguments, in order.\r\n * @return {Observable<T>}\r\n * @name combineAll\r\n */\r\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"053c805f97830e13fc0787b75b90da2b","cacheData":{"env":{}}}